import requests
import os

# --- CONFIGURACI√ìN DE LA URL DE PRUEBA (El "Interruptor" de Entorno) ---
# 
# NOTA: Para hacer las Pruebas de Paridad, DEBES cambiar el valor 
# de BASE_URL entre tu API local y la API de GLPI real.
# 
# 1. PRUEBA LOCAL (Tu servidor Node.js/JavaScript):
BASE_URL = 'http://localhost:3000' 

# 2. PRUEBA DE PARIDAD (Servidor GLPI real en la nube):
# BASE_URL = 'https://firechip.in1.glpi-network.cloud' 
# --------------------------------------------------------------------

API_PATH = '/apirest.php'
SESSION_TOKEN = None # Variable global para almacenar el token capturado

# üö® CORRECCI√ìN CLAVE: Tu server.js requiere el 'app-token' üö®
# Usamos un valor fijo para simular la aplicaci√≥n que llama a la API.
APP_TOKEN = 'your_simulated_app_token_12345' 
# -----------------------------------------------------------

def init_session():
    """
    TEST 1: Prueba el endpoint de autenticaci√≥n.
    Captura el token de la respuesta JSON para usarlo en peticiones futuras.
    """
    global SESSION_TOKEN
    
    url = f"{BASE_URL}{API_PATH}/initSession"
    print(f"\n[TEST 1: AUTH] Intentando conectar a: {url}")
    
    is_secure = BASE_URL.startswith('https')
    
    try:
        response = requests.get(url, verify=is_secure)
    except requests.exceptions.ConnectionError:
        print(f" ¬† ‚ùå FALLO FATAL. No se pudo conectar al servidor en {BASE_URL}. ¬øEst√° encendido?")
        return False
        
    if response.status_code == 200:
        try:
            data = response.json()
            if 'session_token' in data:
                SESSION_TOKEN = data['session_token']
                print(f" ¬† ‚úÖ OK (200). Autenticaci√≥n exitosa.")
                print(f" ¬† üîë Token capturado: {SESSION_TOKEN[:10]}...") 
                return True
            else:
                print(" ¬† ‚ùå FALLO. 200 OK, pero la respuesta no conten√≠a 'session_token'.")
                return False
        except requests.exceptions.JSONDecodeError:
            print(" ¬† ‚ùå FALLO. 200 OK, pero la respuesta no es JSON v√°lido.")
            return False
    else:
        print(f" ¬† ‚ùå FALLO. C√≥digo de estado: {response.status_code}. Autenticaci√≥n fallida.")
        return False

def get_users():
    """
    TEST 2: Prueba el endpoint GET /User usando el token capturado.
    """
    if not SESSION_TOKEN:
        print("\n[TEST 2] Omitido: No hay token de sesi√≥n. No se puede probar el endpoint.")
        return

    url = f"{BASE_URL}{API_PATH}/User"
    
    # *** CORRECCI√ìN FINAL: Se env√≠an AMBOS tokens en min√∫sculas ***
    headers = {
        'session-token': SESSION_TOKEN, 
        'app-token': APP_TOKEN          # <--- ¬°ESTO FALTABA!
    } 
    # ------------------------------------------------------------
    
    print(f"\n[TEST 2: GET /User] Probando listado de Usuarios: {url}")
    
    is_secure = BASE_URL.startswith('https')

    try:
        response = requests.get(url, headers=headers, verify=is_secure)
    except requests.exceptions.ConnectionError:
        print(f" ¬† ‚ùå FALLO FATAL. No se pudo conectar al servidor en {BASE_URL}.")
        return

    # Esta es la verificaci√≥n de Paridad: esperamos 200 OK
    if response.status_code == 200:
        try:
            user_count = len(response.json())
            print(f" ¬† ‚úÖ OK (200). Prueba de Paridad exitosa.")
            print(f" ¬† üìÑ Datos recibidos: Se cargaron {user_count} usuarios (o lista vac√≠a).")
        except:
             print(f" ¬† ‚úÖ OK (200). C√≥digo de estado correcto, pero la respuesta no es una lista JSON.")
    else:
        # Si el 401 persiste, es un problema de cach√© o de que el servidor no procesa bien el token.
        print(f" ¬† ‚ùå FALLO. C√≥digo de estado incorrecto. Se esperaba 200, se obtuvo: {response.status_code}")
        

if __name__ == '__main__':
    print("\n--- INICIANDO PRUEBAS DE PARIDAD AUTOMATIZADAS CON PYTHON ---")
    
    # Esta es la secuencia de pruebas que se ejecuta.
    if init_session():
        get_users()
    
    print("\n--- SECUENCIA DE PRUEBAS FINALIZADA ---")
